#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEClient.h>
#include <LiquidCrystal.h>

// BLE UUIDs
#define SERVICE_UUID        "12345678-1234-1234-1234-1234567890ab"
#define CHARACTERISTIC_UUID "abcd1234-0001-0001-0001-abcdefabcdef"

// LCD RS, E, D4, D5, D6, D7
LiquidCrystal lcd(13, 12, 14, 27, 26, 25);

// BLE
BLEAdvertisedDevice* myDevice;
BLEClient* pClient;
BLERemoteCharacteristic* pRemoteCharacteristic;
bool deviceConnected = false;

// Expressão e resultado
String expressao = "";
bool mostrarResultado = false;

class MyCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.getName() == "XIAO-Teclado") {
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      BLEDevice::getScan()->stop();
    }
  }
};

int calcularExpressao(String expr) {
  // Suporta apenas expressões simples tipo: 12+34, 5*8 etc.
  int op1 = 0, op2 = 0;
  char operador = 0;
  bool parsingSecond = false;

  for (int i = 0; i < expr.length(); i++) {
    char c = expr[i];
    if (c == '+' || c == '-' || c == '*' || c == '/') {
      operador = c;
      parsingSecond = true;
    } else if (isdigit(c)) {
      if (!parsingSecond)
        op1 = op1 * 10 + (c - '0');
      else
        op2 = op2 * 10 + (c - '0');
    }
  }

  switch (operador) {
    case '+': return op1 + op2;
    case '-': return op1 - op2;
    case '*': return op1 * op2;
    case '/': return op2 != 0 ? op1 / op2 : 0;
    default: return 0;
  }
}

static void notifyCallback(
  BLERemoteCharacteristic* pRemoteCharacteristic,
  uint8_t* pData,
  size_t length,
  bool isNotify) {
  
  char c = (char)pData[0];

  if (c == 'D') {
    // Calcular resultado
    int resultado = calcularExpressao(expressao);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Resultado:");
    lcd.setCursor(0, 1);
    lcd.print(resultado);
    expressao = "";
    mostrarResultado = true;
  } else if (c == 'C') {
    expressao = "";
    mostrarResultado = false;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calculadora");
    lcd.setCursor(0, 1);
  } else if (c == 'A') {
    expressao += '+';
  } else if (c == 'B') {
    expressao += '-';
  } else if (c == '*') {
    expressao += '*';
  } else if (c == '#') {
    expressao += '/';
  } else if (c == 'D') {
    // Já tratado acima
  } else if (c == '<' || c == 'X') {
    if (expressao.length() > 0) {
      expressao.remove(expressao.length() - 1);
    }
  } else if (isdigit(c)) {
    expressao += c;
  }

  // Atualizar LCD
  if (!mostrarResultado) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Calculadora");
    lcd.setCursor(0, 1);
    lcd.print(expressao);
  }
}

void setup() {
  Serial.begin(115200);
  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Conectando...");

  BLEDevice::init("");
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(5);

  if (myDevice) {
    pClient = BLEDevice::createClient();
    pClient->connect(myDevice);

    BLERemoteService* pRemoteService = pClient->getService(SERVICE_UUID);
    if (pRemoteService) {
      pRemoteCharacteristic = pRemoteService->getCharacteristic(CHARACTERISTIC_UUID);
      if (pRemoteCharacteristic && pRemoteCharacteristic->canNotify()) {
        pRemoteCharacteristic->registerForNotify(notifyCallback);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Calculadora");
        lcd.setCursor(0, 1);
        deviceConnected = true;
      }
    }
  }

  if (!deviceConnected) {
    lcd.clear();
    lcd.print("Erro na conexao");
  }
}

void loop() {
  // BLE usa callbacks
}
